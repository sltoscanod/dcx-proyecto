{"version":3,"file":"ngx-responsive-image.js","sources":["ng://ngx-responsive-image/lib/breakpoints.token.ts","ng://ngx-responsive-image/lib/default-breakpoints.ts","ng://ngx-responsive-image/lib/default-widths.ts","ng://ngx-responsive-image/lib/image-widths.token.ts","ng://ngx-responsive-image/lib/media/media.service.ts","ng://ngx-responsive-image/lib/responsive-image/responsive-image.directive.ts","ng://ngx-responsive-image/lib/ngx-responsive-image.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport const BREAKPOINTS = new InjectionToken<string[]>('BREAKPOINTS');\r\n","import { Breakpoints } from '@angular/cdk/layout';\r\n\r\nexport const DEFAULT_BREAKPOINTS = [\r\n  Breakpoints.XSmall,\r\n  Breakpoints.Small,\r\n  Breakpoints.Medium,\r\n  Breakpoints.Large,\r\n  Breakpoints.XLarge\r\n];\r\n","export const DEFAULT_WIDTHS = [300, 600, 960, 1280, 1920];\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const IMAGE_WIDTHS = new InjectionToken<number[]>('IMAGE_WIDTHS');\r\n","import { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { merge } from 'rxjs';\r\nimport {\r\n  distinctUntilChanged,\r\n  filter,\r\n  first,\r\n  map,\r\n  pairwise,\r\n  shareReplay,\r\n  startWith,\r\n  takeWhile\r\n} from 'rxjs/operators';\r\nimport { BREAKPOINTS } from '../breakpoints.token';\r\nimport { IMAGE_WIDTHS } from '../image-widths.token';\r\n\r\n@Injectable()\r\nexport class MediaService {\r\n  breakpoints$ = this.breakpointObserver.observe(this.breakpoints);\r\n\r\n  breakpointChange$ = this.breakpoints$.pipe(\r\n    filter(breakpointState => breakpointState.matches),\r\n    distinctUntilChanged(\r\n      (previous, current) =>\r\n        Object.keys(previous.breakpoints)[\r\n          Object.values(previous.breakpoints).indexOf(true)\r\n        ] ===\r\n        Object.keys(current.breakpoints)[\r\n          Object.values(current.breakpoints).indexOf(true)\r\n        ]\r\n    ),\r\n    startWith(null as BreakpointState),\r\n    pairwise()\r\n  );\r\n\r\n  breakpointUp$ = this.breakpointChange$.pipe(\r\n    filter(([previous, current], i) => {\r\n      if (i === 0) {\r\n        return true;\r\n      } else {\r\n        const previousBreakpoints = Object.values(previous.breakpoints);\r\n        const currentBreakpoints = Object.values(current.breakpoints);\r\n        const pbi = previousBreakpoints.findIndex(\r\n          breakpointValue => breakpointValue\r\n        );\r\n        const cbi = currentBreakpoints.findIndex(\r\n          breakpointValue => breakpointValue\r\n        );\r\n        return cbi > pbi;\r\n      }\r\n    }),\r\n    filter<BreakpointState[]>(([previous, current]) => {\r\n      const currentBkreakpoint = Object.keys(current.breakpoints)[\r\n        Object.values(current.breakpoints).indexOf(true)\r\n      ];\r\n\r\n      if (\r\n        !this.maximumBreakpoint ||\r\n        Object.keys(current.breakpoints).indexOf(currentBkreakpoint) >\r\n          Object.keys(current.breakpoints).indexOf(this.maximumBreakpoint)\r\n      ) {\r\n        this.maximumBreakpoint = currentBkreakpoint;\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }),\r\n    map(([previous, current]) => {\r\n      return Object.keys(current.breakpoints)[\r\n        Object.values(current.breakpoints).indexOf(true)\r\n      ];\r\n    }),\r\n    takeWhile(currentBreakpoint => {\r\n      return (\r\n        this.maximumBreakpoint !== this.breakpoints[this.breakpoints.length - 1]\r\n      );\r\n    }, true),\r\n    shareReplay()\r\n  );\r\n\r\n  breakpointAndWidthUp$ = merge(\r\n    this.breakpoints$.pipe(\r\n      first(),\r\n      map(\r\n        breakpointState =>\r\n          Object.keys(breakpointState.breakpoints)[\r\n            Object.values(breakpointState.breakpoints).indexOf(true)\r\n          ]\r\n      )\r\n    ),\r\n    this.breakpointUp$\r\n  ).pipe(\r\n    map(breakpoint => {\r\n      return {\r\n        width: this.imageWidths[this.breakpoints.indexOf(breakpoint)],\r\n        breakpoint\r\n      };\r\n    }),\r\n    shareReplay()\r\n  );\r\n\r\n  private maximumBreakpoint: string;\r\n\r\n  constructor(\r\n    private breakpointObserver: BreakpointObserver,\r\n    @Inject(BREAKPOINTS) private breakpoints,\r\n    @Inject(IMAGE_WIDTHS) private imageWidths\r\n  ) {}\r\n}\r\n","import { isPlatformBrowser } from '@angular/common';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Output,\r\n  PLATFORM_ID,\r\n  Renderer2,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { MediaService } from '../media/media.service';\r\nimport { BreakpointChangeEvent } from './breakpoint-change-event';\r\n\r\n@Directive({\r\n  // tslint:disable-next-line: directive-selector\r\n  selector: 'img[responsiveImage]'\r\n})\r\nexport class ResponsiveImageDirective implements OnDestroy, OnChanges {\r\n  @Input() imgSrc: string;\r\n  @Input() manual: boolean;\r\n  @Output() breakpointUp = new EventEmitter<BreakpointChangeEvent>();\r\n\r\n  private subscriptions: { [key: string]: Subscription } = {};\r\n\r\n  constructor(\r\n    @Inject(PLATFORM_ID) private platformId: any,\r\n    private element: ElementRef<HTMLImageElement>,\r\n    private mediaService: MediaService,\r\n    private renderer2: Renderer2\r\n  ) {}\r\n\r\n  ngOnChanges(simpleChange: SimpleChanges) {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      if (this.subscriptions.mediaSubscription) {\r\n        this.subscriptions.mediaSubscription.unsubscribe();\r\n      }\r\n\r\n      if (this.imgSrc) {\r\n        this.subscriptions.mediaSubscription = this.mediaService.breakpointAndWidthUp$.subscribe(\r\n          result => {\r\n            if (this.manual) {\r\n              this.breakpointUp.emit({\r\n                imgSrc: this.imgSrc,\r\n                breakpoint: result.breakpoint,\r\n                width: result.width\r\n              });\r\n            } else {\r\n              this.renderer2.setAttribute(\r\n                this.element.nativeElement,\r\n                'src',\r\n                this.imgSrc.replace(':width', result.width)\r\n              );\r\n            }\r\n          }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    Object.keys(this.subscriptions).forEach(sk =>\r\n      this.subscriptions[sk].unsubscribe()\r\n    );\r\n  }\r\n}\r\n","import { ObserversModule } from '@angular/cdk/observers';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { BREAKPOINTS } from './breakpoints.token';\r\nimport { IMAGE_WIDTHS } from './image-widths.token';\r\nimport { MediaService } from './media/media.service';\r\nimport { ResponsiveImageDirective } from './responsive-image/responsive-image.directive';\r\n\r\n@NgModule({\r\n  declarations: [ResponsiveImageDirective],\r\n  imports: [ObserversModule, CommonModule],\r\n  exports: [ResponsiveImageDirective]\r\n})\r\nexport class NgxResponsiveImageModule {\r\n  static forRoot(\r\n    breakpoints: string[],\r\n    imageWidths: number[]\r\n  ): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxResponsiveImageModule,\r\n      providers: [\r\n        {\r\n          provide: BREAKPOINTS,\r\n          useValue: breakpoints\r\n        },\r\n        {\r\n          provide: IMAGE_WIDTHS,\r\n          useValue: imageWidths\r\n        },\r\n        MediaService\r\n      ]\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}