/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BreakpointObserver } from '@angular/cdk/layout';
import { Inject, Injectable } from '@angular/core';
import { merge } from 'rxjs';
import { distinctUntilChanged, filter, first, map, pairwise, shareReplay, startWith, takeWhile } from 'rxjs/operators';
import { BREAKPOINTS } from '../breakpoints.token';
import { IMAGE_WIDTHS } from '../image-widths.token';
var MediaService = /** @class */ (function () {
    function MediaService(breakpointObserver, breakpoints, imageWidths) {
        var _this = this;
        this.breakpointObserver = breakpointObserver;
        this.breakpoints = breakpoints;
        this.imageWidths = imageWidths;
        this.breakpoints$ = this.breakpointObserver.observe(this.breakpoints);
        this.breakpointChange$ = this.breakpoints$.pipe(filter((/**
         * @param {?} breakpointState
         * @return {?}
         */
        function (breakpointState) { return breakpointState.matches; })), distinctUntilChanged((/**
         * @param {?} previous
         * @param {?} current
         * @return {?}
         */
        function (previous, current) {
            return Object.keys(previous.breakpoints)[Object.values(previous.breakpoints).indexOf(true)] ===
                Object.keys(current.breakpoints)[Object.values(current.breakpoints).indexOf(true)];
        })), startWith((/** @type {?} */ (null))), pairwise());
        this.breakpointUp$ = this.breakpointChange$.pipe(filter((/**
         * @param {?} __0
         * @param {?} i
         * @return {?}
         */
        function (_a, i) {
            var _b = tslib_1.__read(_a, 2), previous = _b[0], current = _b[1];
            if (i === 0) {
                return true;
            }
            else {
                /** @type {?} */
                var previousBreakpoints = Object.values(previous.breakpoints);
                /** @type {?} */
                var currentBreakpoints = Object.values(current.breakpoints);
                /** @type {?} */
                var pbi = previousBreakpoints.findIndex((/**
                 * @param {?} breakpointValue
                 * @return {?}
                 */
                function (breakpointValue) { return breakpointValue; }));
                /** @type {?} */
                var cbi = currentBreakpoints.findIndex((/**
                 * @param {?} breakpointValue
                 * @return {?}
                 */
                function (breakpointValue) { return breakpointValue; }));
                return cbi > pbi;
            }
        })), filter((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), previous = _b[0], current = _b[1];
            /** @type {?} */
            var currentBkreakpoint = Object.keys(current.breakpoints)[Object.values(current.breakpoints).indexOf(true)];
            if (!_this.maximumBreakpoint ||
                Object.keys(current.breakpoints).indexOf(currentBkreakpoint) >
                    Object.keys(current.breakpoints).indexOf(_this.maximumBreakpoint)) {
                _this.maximumBreakpoint = currentBkreakpoint;
                return true;
            }
            else {
                return false;
            }
        })), map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), previous = _b[0], current = _b[1];
            return Object.keys(current.breakpoints)[Object.values(current.breakpoints).indexOf(true)];
        })), takeWhile((/**
         * @param {?} currentBreakpoint
         * @return {?}
         */
        function (currentBreakpoint) {
            return (_this.maximumBreakpoint !== _this.breakpoints[_this.breakpoints.length - 1]);
        }), true), shareReplay());
        this.breakpointAndWidthUp$ = merge(this.breakpoints$.pipe(first(), map((/**
         * @param {?} breakpointState
         * @return {?}
         */
        function (breakpointState) {
            return Object.keys(breakpointState.breakpoints)[Object.values(breakpointState.breakpoints).indexOf(true)];
        }))), this.breakpointUp$).pipe(map((/**
         * @param {?} breakpoint
         * @return {?}
         */
        function (breakpoint) {
            return {
                width: _this.imageWidths[_this.breakpoints.indexOf(breakpoint)],
                breakpoint: breakpoint
            };
        })), shareReplay());
    }
    MediaService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    MediaService.ctorParameters = function () { return [
        { type: BreakpointObserver },
        { type: undefined, decorators: [{ type: Inject, args: [BREAKPOINTS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [IMAGE_WIDTHS,] }] }
    ]; };
    return MediaService;
}());
export { MediaService };
if (false) {
    /** @type {?} */
    MediaService.prototype.breakpoints$;
    /** @type {?} */
    MediaService.prototype.breakpointChange$;
    /** @type {?} */
    MediaService.prototype.breakpointUp$;
    /** @type {?} */
    MediaService.prototype.breakpointAndWidthUp$;
    /**
     * @type {?}
     * @private
     */
    MediaService.prototype.maximumBreakpoint;
    /**
     * @type {?}
     * @private
     */
    MediaService.prototype.breakpointObserver;
    /**
     * @type {?}
     * @private
     */
    MediaService.prototype.breakpoints;
    /**
     * @type {?}
     * @private
     */
    MediaService.prototype.imageWidths;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1yZXNwb25zaXZlLWltYWdlLyIsInNvdXJjZXMiOlsibGliL21lZGlhL21lZGlhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsa0JBQWtCLEVBQW1CLE1BQU0scUJBQXFCLENBQUM7QUFDMUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQ0wsb0JBQW9CLEVBQ3BCLE1BQU0sRUFDTixLQUFLLEVBQ0wsR0FBRyxFQUNILFFBQVEsRUFDUixXQUFXLEVBQ1gsU0FBUyxFQUNULFNBQVMsRUFDVixNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFckQ7SUF1RkUsc0JBQ1Usa0JBQXNDLEVBQ2pCLFdBQVcsRUFDVixXQUFXO1FBSDNDLGlCQUlJO1FBSE0sdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUNqQixnQkFBVyxHQUFYLFdBQVcsQ0FBQTtRQUNWLGdCQUFXLEdBQVgsV0FBVyxDQUFBO1FBeEYzQyxpQkFBWSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRWpFLHNCQUFpQixHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUN4QyxNQUFNOzs7O1FBQUMsVUFBQSxlQUFlLElBQUksT0FBQSxlQUFlLENBQUMsT0FBTyxFQUF2QixDQUF1QixFQUFDLEVBQ2xELG9CQUFvQjs7Ozs7UUFDbEIsVUFBQyxRQUFRLEVBQUUsT0FBTztZQUNoQixPQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxD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LEVBQ1AsR0FBRzs7OztRQUNELFVBQUEsZUFBZTtZQUNiLE9BQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQ3RDLE1BQU0sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FDekQ7UUFGRCxDQUVDLEVBQ0osQ0FDRixFQUNELElBQUksQ0FBQyxhQUFhLENBQ25CLENBQUMsSUFBSSxDQUNKLEdBQUc7Ozs7UUFBQyxVQUFBLFVBQVU7WUFDWixPQUFPO2dCQUNMLEtBQUssRUFBRSxLQUFJLENBQUMsV0FBVyxDQUFDLEtBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUM3RCxVQUFVLFlBQUE7YUFDWCxDQUFDO1FBQ0osQ0FBQyxFQUFDLEVBQ0YsV0FBVyxFQUFFLENBQ2QsQ0FBQztJQVFDLENBQUM7O2dCQTNGTCxVQUFVOzs7O2dCQWhCRixrQkFBa0I7Z0RBeUd0QixNQUFNLFNBQUMsV0FBVztnREFDbEIsTUFBTSxTQUFDLFlBQVk7O0lBRXhCLG1CQUFDO0NBQUEsQUE1RkQsSUE0RkM7U0EzRlksWUFBWTs7O0lBQ3ZCLG9DQUFpRTs7SUFFakUseUNBYUU7O0lBRUYscUNBMkNFOztJQUVGLDZDQW1CRTs7Ozs7SUFFRix5Q0FBa0M7Ozs7O0lBR2hDLDBDQUE4Qzs7Ozs7SUFDOUMsbUNBQXdDOzs7OztJQUN4QyxtQ0FBeUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcmVha3BvaW50T2JzZXJ2ZXIsIEJyZWFrcG9pbnRTdGF0ZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9sYXlvdXQnO1xyXG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgbWVyZ2UgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHtcclxuICBkaXN0aW5jdFVudGlsQ2hhbmdlZCxcclxuICBmaWx0ZXIsXHJcbiAgZmlyc3QsXHJcbiAgbWFwLFxyXG4gIHBhaXJ3aXNlLFxyXG4gIHNoYXJlUmVwbGF5LFxyXG4gIHN0YXJ0V2l0aCxcclxuICB0YWtlV2hpbGVcclxufSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEJSRUFLUE9JTlRTIH0gZnJvbSAnLi4vYnJlYWtwb2ludHMudG9rZW4nO1xyXG5pbXBvcnQgeyBJTUFHRV9XSURUSFMgfSBmcm9tICcuLi9pbWFnZS13aWR0aHMudG9rZW4nO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTWVkaWFTZXJ2aWNlIHtcclxuICBicmVha3BvaW50cyQgPSB0aGlzLmJyZWFrcG9pbnRPYnNlcnZlci5vYnNlcnZlKHRoaXMuYnJlYWtwb2ludHMpO1xyXG5cclxuICBicmVha3BvaW50Q2hhbmdlJCA9IHRoaXMuYnJlYWtwb2ludHMkLnBpcGUoXHJcbiAgICBmaWx0ZXIoYnJlYWtwb2ludFN0YXRlID0+IGJyZWFrcG9pbnRTdGF0ZS5tYXRjaGVzKSxcclxuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKFxyXG4gICAgICAocHJldmlvdXMsIGN1cnJlbnQpID0+XHJcbiAgICAgICAgT2JqZWN0LmtleXMocHJldmlvdXMuYnJlYWtwb2ludHMpW1xyXG4gICAgICAgICAgT2JqZWN0LnZhbHVlcyhwcmV2aW91cy5icmVha3BvaW50cykuaW5kZXhPZih0cnVlKVxyXG4gICAgICAgIF0gPT09XHJcbiAgICAgICAgT2JqZWN0LmtleXMoY3VycmVudC5icmVha3BvaW50cylbXHJcbiAgICAgICAgICBPYmplY3QudmFsdWVzKGN1cnJlbnQuYnJlYWtwb2ludHMpLmluZGV4T2YodHJ1ZSlcclxuICAgICAgICBdXHJcbiAgICApLFxyXG4gICAgc3RhcnRXaXRoKG51bGwgYXMgQnJlYWtwb2ludFN0YXRlKSxcclxuICAgIHBhaXJ3aXNlKClcclxuICApO1xyXG5cclxuICBicmVha3BvaW50VXAkID0gdGhpcy5icmVha3BvaW50Q2hhbmdlJC5waXBlKFxyXG4gICAgZmlsdGVyKChbcHJldmlvdXMsIGN1cnJlbnRdLCBpKSA9PiB7XHJcbiAgICAgIGlmIChpID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgcHJldmlvdXNCcmVha3BvaW50cyA9IE9iamVjdC52YWx1ZXMocHJldmlvdXMuYnJlYWtwb2ludHMpO1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRCcmVha3BvaW50cyA9IE9iamVjdC52YWx1ZXMoY3VycmVudC5icmVha3BvaW50cyk7XHJcbiAgICAgICAgY29uc3QgcGJpID0gcHJldmlvdXNCcmVha3BvaW50cy5maW5kSW5kZXgoXHJcbiAgICAgICAgICBicmVha3BvaW50VmFsdWUgPT4gYnJlYWtwb2ludFZhbHVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCBjYmkgPSBjdXJyZW50QnJlYWtwb2ludHMuZmluZEluZGV4KFxyXG4gICAgICAgICAgYnJlYWtwb2ludFZhbHVlID0+IGJyZWFrcG9pbnRWYWx1ZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIGNiaSA+IHBiaTtcclxuICAgICAgfVxyXG4gICAgfSksXHJcbiAgICBmaWx0ZXI8QnJlYWtwb2ludFN0YXRlW10+KChbcHJldmlvdXMsIGN1cnJlbnRdKSA9PiB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRCa3JlYWtwb2ludCA9IE9iamVjdC5rZXlzKGN1cnJlbnQuYnJlYWtwb2ludHMpW1xyXG4gICAgICAgIE9iamVjdC52YWx1ZXMoY3VycmVudC5icmVha3BvaW50cykuaW5kZXhPZih0cnVlKVxyXG4gICAgICBdO1xyXG5cclxuICAgICAgaWYgKFxyXG4gICAgICAgICF0aGlzLm1heGltdW1CcmVha3BvaW50IHx8XHJcbiAgICAgICAgT2JqZWN0LmtleXMoY3VycmVudC5icmVha3BvaW50cykuaW5kZXhPZihjdXJyZW50QmtyZWFrcG9pbnQpID5cclxuICAgICAgICAgIE9iamVjdC5rZXlzKGN1cnJlbnQuYnJlYWtwb2ludHMpLmluZGV4T2YodGhpcy5tYXhpbXVtQnJlYWtwb2ludClcclxuICAgICAgKSB7XHJcbiAgICAgICAgdGhpcy5tYXhpbXVtQnJlYWtwb2ludCA9IGN1cnJlbnRCa3JlYWtwb2ludDtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0pLFxyXG4gICAgbWFwKChbcHJldmlvdXMsIGN1cnJlbnRdKSA9PiB7XHJcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhjdXJyZW50LmJyZWFrcG9pbnRzKVtcclxuICAgICAgICBPYmplY3QudmFsdWVzKGN1cnJlbnQuYnJlYWtwb2ludHMpLmluZGV4T2YodHJ1ZSlcclxuICAgICAgXTtcclxuICAgIH0pLFxyXG4gICAgdGFrZVdoaWxlKGN1cnJlbnRCcmVha3BvaW50ID0+IHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICB0aGlzLm1heGltdW1CcmVha3BvaW50ICE9PSB0aGlzLmJyZWFrcG9pbnRzW3RoaXMuYnJlYWtwb2ludHMubGVuZ3RoIC0gMV1cclxuICAgICAgKTtcclxuICAgIH0sIHRydWUpLFxyXG4gICAgc2hhcmVSZXBsYXkoKVxyXG4gICk7XHJcblxyXG4gIGJyZWFrcG9pbnRBbmRXaWR0aFVwJCA9IG1lcmdlKFxyXG4gICAgdGhpcy5icmVha3BvaW50cyQucGlwZShcclxuICAgICAgZmlyc3QoKSxcclxuICAgICAgbWFwKFxyXG4gICAgICAgIGJyZWFrcG9pbnRTdGF0ZSA9PlxyXG4gICAgICAgICAgT2JqZWN0LmtleXMoYnJlYWtwb2ludFN0YXRlLmJyZWFrcG9pbnRzKVtcclxuICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyhicmVha3BvaW50U3RhdGUuYnJlYWtwb2ludHMpLmluZGV4T2YodHJ1ZSlcclxuICAgICAgICAgIF1cclxuICAgICAgKVxyXG4gICAgKSxcclxuICAgIHRoaXMuYnJlYWtwb2ludFVwJFxyXG4gICkucGlwZShcclxuICAgIG1hcChicmVha3BvaW50ID0+IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB3aWR0aDogdGhpcy5pbWFnZVdpZHRoc1t0aGlzLmJyZWFrcG9pbnRzLmluZGV4T2YoYnJlYWtwb2ludCldLFxyXG4gICAgICAgIGJyZWFrcG9pbnRcclxuICAgICAgfTtcclxuICAgIH0pLFxyXG4gICAgc2hhcmVSZXBsYXkoKVxyXG4gICk7XHJcblxyXG4gIHByaXZhdGUgbWF4aW11bUJyZWFrcG9pbnQ6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGJyZWFrcG9pbnRPYnNlcnZlcjogQnJlYWtwb2ludE9ic2VydmVyLFxyXG4gICAgQEluamVjdChCUkVBS1BPSU5UUykgcHJpdmF0ZSBicmVha3BvaW50cyxcclxuICAgIEBJbmplY3QoSU1BR0VfV0lEVEhTKSBwcml2YXRlIGltYWdlV2lkdGhzXHJcbiAgKSB7fVxyXG59XHJcbiJdfQ==