/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isPlatformBrowser } from '@angular/common';
import { Directive, ElementRef, EventEmitter, Inject, Input, Output, PLATFORM_ID, Renderer2 } from '@angular/core';
import { MediaService } from '../media/media.service';
var ResponsiveImageDirective = /** @class */ (function () {
    function ResponsiveImageDirective(platformId, element, mediaService, renderer2) {
        this.platformId = platformId;
        this.element = element;
        this.mediaService = mediaService;
        this.renderer2 = renderer2;
        this.breakpointUp = new EventEmitter();
        this.subscriptions = {};
    }
    /**
     * @param {?} simpleChange
     * @return {?}
     */
    ResponsiveImageDirective.prototype.ngOnChanges = /**
     * @param {?} simpleChange
     * @return {?}
     */
    function (simpleChange) {
        var _this = this;
        if (isPlatformBrowser(this.platformId)) {
            if (this.subscriptions.mediaSubscription) {
                this.subscriptions.mediaSubscription.unsubscribe();
            }
            if (this.imgSrc) {
                this.subscriptions.mediaSubscription = this.mediaService.breakpointAndWidthUp$.subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (_this.manual) {
                        _this.breakpointUp.emit({
                            imgSrc: _this.imgSrc,
                            breakpoint: result.breakpoint,
                            width: result.width
                        });
                    }
                    else {
                        _this.renderer2.setAttribute(_this.element.nativeElement, 'src', _this.imgSrc.replace(':width', result.width));
                    }
                }));
            }
        }
    };
    /**
     * @return {?}
     */
    ResponsiveImageDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        Object.keys(this.subscriptions).forEach((/**
         * @param {?} sk
         * @return {?}
         */
        function (sk) {
            return _this.subscriptions[sk].unsubscribe();
        }));
    };
    ResponsiveImageDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line: directive-selector
                    selector: 'img[responsiveImage]'
                },] }
    ];
    /** @nocollapse */
    ResponsiveImageDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: ElementRef },
        { type: MediaService },
        { type: Renderer2 }
    ]; };
    ResponsiveImageDirective.propDecorators = {
        imgSrc: [{ type: Input }],
        manual: [{ type: Input }],
        breakpointUp: [{ type: Output }]
    };
    return ResponsiveImageDirective;
}());
export { ResponsiveImageDirective };
if (false) {
    /** @type {?} */
    ResponsiveImageDirective.prototype.imgSrc;
    /** @type {?} */
    ResponsiveImageDirective.prototype.manual;
    /** @type {?} */
    ResponsiveImageDirective.prototype.breakpointUp;
    /**
     * @type {?}
     * @private
     */
    ResponsiveImageDirective.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    ResponsiveImageDirective.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    ResponsiveImageDirective.prototype.element;
    /**
     * @type {?}
     * @private
     */
    ResponsiveImageDirective.prototype.mediaService;
    /**
     * @type {?}
     * @private
     */
    ResponsiveImageDirective.prototype.renderer2;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2l2ZS1pbWFnZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcmVzcG9uc2l2ZS1pbWFnZS8iLCJzb3VyY2VzIjpbImxpYi9yZXNwb25zaXZlLWltYWdlL3Jlc3BvbnNpdmUtaW1hZ2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFHTCxNQUFNLEVBQ04sV0FBVyxFQUNYLFNBQVMsRUFFVixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFHdEQ7SUFXRSxrQ0FDK0IsVUFBZSxFQUNwQyxPQUFxQyxFQUNyQyxZQUEwQixFQUMxQixTQUFvQjtRQUhDLGVBQVUsR0FBVixVQUFVLENBQUs7UUFDcEMsWUFBTyxHQUFQLE9BQU8sQ0FBOEI7UUFDckMsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQVJwQixpQkFBWSxHQUFHLElBQUksWUFBWSxFQUF5QixDQUFDO1FBRTNELGtCQUFhLEdBQW9DLEVBQUUsQ0FBQztJQU96RCxDQUFDOzs7OztJQUVKLDhDQUFXOzs7O0lBQVgsVUFBWSxZQUEyQjtRQUF2QyxpQkEwQkM7UUF6QkMsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDdEMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixFQUFFO2dCQUN4QyxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxDQUFDO2FBQ3BEO1lBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNmLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTOzs7O2dCQUN0RixVQUFBLE1BQU07b0JBQ0osSUFBSSxLQUFJLENBQUMsTUFBTSxFQUFFO3dCQUNmLEtBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDOzRCQUNyQixNQUFNLEVBQUUsS0FBSSxDQUFDLE1BQU07NEJBQ25CLFVBQVUsRUFBRSxNQUFNLENBQUMsVUFBVTs0QkFDN0IsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLO3lCQUNwQixDQUFDLENBQUM7cUJBQ0o7eUJBQU07d0JBQ0wsS0FBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQ3pCLEtBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUMxQixLQUFLLEVBQ0wsS0FBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FDNUMsQ0FBQztxQkFDSDtnQkFDSCxDQUFDLEVBQ0YsQ0FBQzthQUNIO1NBQ0Y7SUFDSCxDQUFDOzs7O0lBRUQsOENBQVc7OztJQUFYO1FBQUEsaUJBSUM7UUFIQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQSxFQUFFO1lBQ3hDLE9BQUEsS0FBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUU7UUFBcEMsQ0FBb0MsRUFDckMsQ0FBQztJQUNKLENBQUM7O2dCQWxERixTQUFTLFNBQUM7O29CQUVULFFBQVEsRUFBRSxzQkFBc0I7aUJBQ2pDOzs7O2dEQVNJLE1BQU0sU0FBQyxXQUFXO2dCQTNCckIsVUFBVTtnQkFZSCxZQUFZO2dCQUpuQixTQUFTOzs7eUJBWVIsS0FBSzt5QkFDTCxLQUFLOytCQUNMLE1BQU07O0lBNENULCtCQUFDO0NBQUEsQUFuREQsSUFtREM7U0EvQ1ksd0JBQXdCOzs7SUFDbkMsMENBQXdCOztJQUN4QiwwQ0FBeUI7O0lBQ3pCLGdEQUFtRTs7Ozs7SUFFbkUsaURBQTREOzs7OztJQUcxRCw4Q0FBNEM7Ozs7O0lBQzVDLDJDQUE2Qzs7Ozs7SUFDN0MsZ0RBQWtDOzs7OztJQUNsQyw2Q0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7XHJcbiAgRGlyZWN0aXZlLFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgRXZlbnRFbWl0dGVyLFxyXG4gIEluamVjdCxcclxuICBJbnB1dCxcclxuICBPbkNoYW5nZXMsXHJcbiAgT25EZXN0cm95LFxyXG4gIE91dHB1dCxcclxuICBQTEFURk9STV9JRCxcclxuICBSZW5kZXJlcjIsXHJcbiAgU2ltcGxlQ2hhbmdlc1xyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgTWVkaWFTZXJ2aWNlIH0gZnJvbSAnLi4vbWVkaWEvbWVkaWEuc2VydmljZSc7XHJcbmltcG9ydCB7IEJyZWFrcG9pbnRDaGFuZ2VFdmVudCB9IGZyb20gJy4vYnJlYWtwb2ludC1jaGFuZ2UtZXZlbnQnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBkaXJlY3RpdmUtc2VsZWN0b3JcclxuICBzZWxlY3RvcjogJ2ltZ1tyZXNwb25zaXZlSW1hZ2VdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUmVzcG9uc2l2ZUltYWdlRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95LCBPbkNoYW5nZXMge1xyXG4gIEBJbnB1dCgpIGltZ1NyYzogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIG1hbnVhbDogYm9vbGVhbjtcclxuICBAT3V0cHV0KCkgYnJlYWtwb2ludFVwID0gbmV3IEV2ZW50RW1pdHRlcjxCcmVha3BvaW50Q2hhbmdlRXZlbnQ+KCk7XHJcblxyXG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uczogeyBba2V5OiBzdHJpbmddOiBTdWJzY3JpcHRpb24gfSA9IHt9O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogYW55LFxyXG4gICAgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmPEhUTUxJbWFnZUVsZW1lbnQ+LFxyXG4gICAgcHJpdmF0ZSBtZWRpYVNlcnZpY2U6IE1lZGlhU2VydmljZSxcclxuICAgIHByaXZhdGUgcmVuZGVyZXIyOiBSZW5kZXJlcjJcclxuICApIHt9XHJcblxyXG4gIG5nT25DaGFuZ2VzKHNpbXBsZUNoYW5nZTogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcclxuICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9ucy5tZWRpYVN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5tZWRpYVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpcy5pbWdTcmMpIHtcclxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMubWVkaWFTdWJzY3JpcHRpb24gPSB0aGlzLm1lZGlhU2VydmljZS5icmVha3BvaW50QW5kV2lkdGhVcCQuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgcmVzdWx0ID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubWFudWFsKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5icmVha3BvaW50VXAuZW1pdCh7XHJcbiAgICAgICAgICAgICAgICBpbWdTcmM6IHRoaXMuaW1nU3JjLFxyXG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludDogcmVzdWx0LmJyZWFrcG9pbnQsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogcmVzdWx0LndpZHRoXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlcjIuc2V0QXR0cmlidXRlKFxyXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAnc3JjJyxcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1nU3JjLnJlcGxhY2UoJzp3aWR0aCcsIHJlc3VsdC53aWR0aClcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICBPYmplY3Qua2V5cyh0aGlzLnN1YnNjcmlwdGlvbnMpLmZvckVhY2goc2sgPT5cclxuICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW3NrXS51bnN1YnNjcmliZSgpXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iXX0=