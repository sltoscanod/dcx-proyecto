{"version":3,"file":"ngx-responsive-image.js","sources":["ngx-responsive-image/lib/breakpoints.token.ts","ngx-responsive-image/lib/default-breakpoints.ts","ngx-responsive-image/lib/default-widths.ts","ngx-responsive-image/lib/image-widths.token.ts","ngx-responsive-image/lib/media/media.service.ts","ngx-responsive-image/lib/responsive-image/responsive-image.directive.ts","ngx-responsive-image/lib/ngx-responsive-image.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport const BREAKPOINTS = new InjectionToken<string[]>('BREAKPOINTS');\r\n","import { Breakpoints } from '@angular/cdk/layout';\r\n\r\nexport const DEFAULT_BREAKPOINTS = [\r\n  Breakpoints.XSmall,\r\n  Breakpoints.Small,\r\n  Breakpoints.Medium,\r\n  Breakpoints.Large,\r\n  Breakpoints.XLarge\r\n];\r\n","export const DEFAULT_WIDTHS = [300, 600, 960, 1280, 1920];\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const IMAGE_WIDTHS = new InjectionToken<number[]>('IMAGE_WIDTHS');\r\n","import { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { merge } from 'rxjs';\r\nimport {\r\n  distinctUntilChanged,\r\n  filter,\r\n  first,\r\n  map,\r\n  pairwise,\r\n  shareReplay,\r\n  startWith,\r\n  takeWhile\r\n} from 'rxjs/operators';\r\nimport { BREAKPOINTS } from '../breakpoints.token';\r\nimport { IMAGE_WIDTHS } from '../image-widths.token';\r\n\r\n@Injectable()\r\nexport class MediaService {\r\n  breakpoints$ = this.breakpointObserver.observe(this.breakpoints);\r\n\r\n  breakpointChange$ = this.breakpoints$.pipe(\r\n    filter(breakpointState => breakpointState.matches),\r\n    distinctUntilChanged(\r\n      (previous, current) =>\r\n        Object.keys(previous.breakpoints)[\r\n          Object.values(previous.breakpoints).indexOf(true)\r\n        ] ===\r\n        Object.keys(current.breakpoints)[\r\n          Object.values(current.breakpoints).indexOf(true)\r\n        ]\r\n    ),\r\n    startWith(null as BreakpointState),\r\n    pairwise()\r\n  );\r\n\r\n  breakpointUp$ = this.breakpointChange$.pipe(\r\n    filter(([previous, current], i) => {\r\n      if (i === 0) {\r\n        return true;\r\n      } else {\r\n        const previousBreakpoints = Object.values(previous.breakpoints);\r\n        const currentBreakpoints = Object.values(current.breakpoints);\r\n        const pbi = previousBreakpoints.findIndex(\r\n          breakpointValue => breakpointValue\r\n        );\r\n        const cbi = currentBreakpoints.findIndex(\r\n          breakpointValue => breakpointValue\r\n        );\r\n        return cbi > pbi;\r\n      }\r\n    }),\r\n    filter<BreakpointState[]>(([previous, current]) => {\r\n      const currentBkreakpoint = Object.keys(current.breakpoints)[\r\n        Object.values(current.breakpoints).indexOf(true)\r\n      ];\r\n\r\n      if (\r\n        !this.maximumBreakpoint ||\r\n        Object.keys(current.breakpoints).indexOf(currentBkreakpoint) >\r\n          Object.keys(current.breakpoints).indexOf(this.maximumBreakpoint)\r\n      ) {\r\n        this.maximumBreakpoint = currentBkreakpoint;\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }),\r\n    map(([previous, current]) => {\r\n      return Object.keys(current.breakpoints)[\r\n        Object.values(current.breakpoints).indexOf(true)\r\n      ];\r\n    }),\r\n    takeWhile(currentBreakpoint => {\r\n      return (\r\n        this.maximumBreakpoint !== this.breakpoints[this.breakpoints.length - 1]\r\n      );\r\n    }, true),\r\n    shareReplay()\r\n  );\r\n\r\n  breakpointAndWidthUp$ = merge(\r\n    this.breakpoints$.pipe(\r\n      first(),\r\n      map(\r\n        breakpointState =>\r\n          Object.keys(breakpointState.breakpoints)[\r\n            Object.values(breakpointState.breakpoints).indexOf(true)\r\n          ]\r\n      )\r\n    ),\r\n    this.breakpointUp$\r\n  ).pipe(\r\n    map(breakpoint => {\r\n      return {\r\n        width: this.imageWidths[this.breakpoints.indexOf(breakpoint)],\r\n        breakpoint\r\n      };\r\n    }),\r\n    shareReplay()\r\n  );\r\n\r\n  private maximumBreakpoint: string;\r\n\r\n  constructor(\r\n    private breakpointObserver: BreakpointObserver,\r\n    @Inject(BREAKPOINTS) private breakpoints,\r\n    @Inject(IMAGE_WIDTHS) private imageWidths\r\n  ) {}\r\n}\r\n","import { isPlatformBrowser } from '@angular/common';\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Output,\r\n  PLATFORM_ID,\r\n  Renderer2,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { MediaService } from '../media/media.service';\r\nimport { BreakpointChangeEvent } from './breakpoint-change-event';\r\n\r\n@Directive({\r\n  // tslint:disable-next-line: directive-selector\r\n  selector: 'img[responsiveImage]'\r\n})\r\nexport class ResponsiveImageDirective implements OnDestroy, OnChanges {\r\n  @Input() imgSrc: string;\r\n  @Input() manual: boolean;\r\n  @Output() breakpointUp = new EventEmitter<BreakpointChangeEvent>();\r\n\r\n  private subscriptions: { [key: string]: Subscription } = {};\r\n\r\n  constructor(\r\n    @Inject(PLATFORM_ID) private platformId: any,\r\n    private element: ElementRef<HTMLImageElement>,\r\n    private mediaService: MediaService,\r\n    private renderer2: Renderer2\r\n  ) {}\r\n\r\n  ngOnChanges(simpleChange: SimpleChanges) {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      if (this.subscriptions.mediaSubscription) {\r\n        this.subscriptions.mediaSubscription.unsubscribe();\r\n      }\r\n\r\n      if (this.imgSrc) {\r\n        this.subscriptions.mediaSubscription = this.mediaService.breakpointAndWidthUp$.subscribe(\r\n          result => {\r\n            if (this.manual) {\r\n              this.breakpointUp.emit({\r\n                imgSrc: this.imgSrc,\r\n                breakpoint: result.breakpoint,\r\n                width: result.width\r\n              });\r\n            } else {\r\n              this.renderer2.setAttribute(\r\n                this.element.nativeElement,\r\n                'src',\r\n                this.imgSrc.replace(':width', result.width)\r\n              );\r\n            }\r\n          }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    Object.keys(this.subscriptions).forEach(sk =>\r\n      this.subscriptions[sk].unsubscribe()\r\n    );\r\n  }\r\n}\r\n","import { ObserversModule } from '@angular/cdk/observers';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { BREAKPOINTS } from './breakpoints.token';\r\nimport { IMAGE_WIDTHS } from './image-widths.token';\r\nimport { MediaService } from './media/media.service';\r\nimport { ResponsiveImageDirective } from './responsive-image/responsive-image.directive';\r\n\r\n@NgModule({\r\n  declarations: [ResponsiveImageDirective],\r\n  imports: [ObserversModule, CommonModule],\r\n  exports: [ResponsiveImageDirective]\r\n})\r\nexport class NgxResponsiveImageModule {\r\n  static forRoot(\r\n    breakpoints: string[],\r\n    imageWidths: number[]\r\n  ): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxResponsiveImageModule,\r\n      providers: [\r\n        {\r\n          provide: BREAKPOINTS,\r\n          useValue: breakpoints\r\n        },\r\n        {\r\n          provide: IMAGE_WIDTHS,\r\n          useValue: imageWidths\r\n        },\r\n        MediaService\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}