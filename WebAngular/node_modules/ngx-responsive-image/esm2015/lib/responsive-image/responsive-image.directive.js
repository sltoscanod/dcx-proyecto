/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isPlatformBrowser } from '@angular/common';
import { Directive, ElementRef, EventEmitter, Inject, Input, Output, PLATFORM_ID, Renderer2 } from '@angular/core';
import { MediaService } from '../media/media.service';
export class ResponsiveImageDirective {
    /**
     * @param {?} platformId
     * @param {?} element
     * @param {?} mediaService
     * @param {?} renderer2
     */
    constructor(platformId, element, mediaService, renderer2) {
        this.platformId = platformId;
        this.element = element;
        this.mediaService = mediaService;
        this.renderer2 = renderer2;
        this.breakpointUp = new EventEmitter();
        this.subscriptions = {};
    }
    /**
     * @param {?} simpleChange
     * @return {?}
     */
    ngOnChanges(simpleChange) {
        if (isPlatformBrowser(this.platformId)) {
            if (this.subscriptions.mediaSubscription) {
                this.subscriptions.mediaSubscription.unsubscribe();
            }
            if (this.imgSrc) {
                this.subscriptions.mediaSubscription = this.mediaService.breakpointAndWidthUp$.subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                result => {
                    if (this.manual) {
                        this.breakpointUp.emit({
                            imgSrc: this.imgSrc,
                            breakpoint: result.breakpoint,
                            width: result.width
                        });
                    }
                    else {
                        this.renderer2.setAttribute(this.element.nativeElement, 'src', this.imgSrc.replace(':width', result.width));
                    }
                }));
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        Object.keys(this.subscriptions).forEach((/**
         * @param {?} sk
         * @return {?}
         */
        sk => this.subscriptions[sk].unsubscribe()));
    }
}
ResponsiveImageDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line: directive-selector
                selector: 'img[responsiveImage]'
            },] }
];
/** @nocollapse */
ResponsiveImageDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: ElementRef },
    { type: MediaService },
    { type: Renderer2 }
];
ResponsiveImageDirective.propDecorators = {
    imgSrc: [{ type: Input }],
    manual: [{ type: Input }],
    breakpointUp: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ResponsiveImageDirective.prototype.imgSrc;
    /** @type {?} */
    ResponsiveImageDirective.prototype.manual;
    /** @type {?} */
    ResponsiveImageDirective.prototype.breakpointUp;
    /**
     * @type {?}
     * @private
     */
    ResponsiveImageDirective.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    ResponsiveImageDirective.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    ResponsiveImageDirective.prototype.element;
    /**
     * @type {?}
     * @private
     */
    ResponsiveImageDirective.prototype.mediaService;
    /**
     * @type {?}
     * @private
     */
    ResponsiveImageDirective.prototype.renderer2;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2l2ZS1pbWFnZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcmVzcG9uc2l2ZS1pbWFnZS8iLCJzb3VyY2VzIjpbImxpYi9yZXNwb25zaXZlLWltYWdlL3Jlc3BvbnNpdmUtaW1hZ2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFHTCxNQUFNLEVBQ04sV0FBVyxFQUNYLFNBQVMsRUFFVixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFPdEQsTUFBTSxPQUFPLHdCQUF3Qjs7Ozs7OztJQU9uQyxZQUMrQixVQUFlLEVBQ3BDLE9BQXFDLEVBQ3JDLFlBQTBCLEVBQzFCLFNBQW9CO1FBSEMsZUFBVSxHQUFWLFVBQVUsQ0FBSztRQUNwQyxZQUFPLEdBQVAsT0FBTyxDQUE4QjtRQUNyQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBUnBCLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQXlCLENBQUM7UUFFM0Qsa0JBQWEsR0FBb0MsRUFBRSxDQUFDO0lBT3pELENBQUM7Ozs7O0lBRUosV0FBVyxDQUFDLFlBQTJCO1FBQ3JDLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3RDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsRUFBRTtnQkFDeEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUNwRDtZQUVELElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDZixJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMscUJBQXFCLENBQUMsU0FBUzs7OztnQkFDdEYsTUFBTSxDQUFDLEVBQUU7b0JBQ1AsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO3dCQUNmLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDOzRCQUNyQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07NEJBQ25CLFVBQVUsRUFBRSxNQUFNLENBQUMsVUFBVTs0QkFDN0IsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLO3lCQUNwQixDQUFDLENBQUM7cUJBQ0o7eUJBQU07d0JBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUMxQixLQUFLLEVBQ0wsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FDNUMsQ0FBQztxQkFDSDtnQkFDSCxDQUFDLEVBQ0YsQ0FBQzthQUNIO1NBQ0Y7SUFDSCxDQUFDOzs7O0lBRUQsV0FBVztRQUNULE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU87Ozs7UUFBQyxFQUFFLENBQUMsRUFBRSxDQUMzQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUNyQyxDQUFDO0lBQ0osQ0FBQzs7O1lBbERGLFNBQVMsU0FBQzs7Z0JBRVQsUUFBUSxFQUFFLHNCQUFzQjthQUNqQzs7Ozs0Q0FTSSxNQUFNLFNBQUMsV0FBVztZQTNCckIsVUFBVTtZQVlILFlBQVk7WUFKbkIsU0FBUzs7O3FCQVlSLEtBQUs7cUJBQ0wsS0FBSzsyQkFDTCxNQUFNOzs7O0lBRlAsMENBQXdCOztJQUN4QiwwQ0FBeUI7O0lBQ3pCLGdEQUFtRTs7Ozs7SUFFbkUsaURBQTREOzs7OztJQUcxRCw4Q0FBNEM7Ozs7O0lBQzVDLDJDQUE2Qzs7Ozs7SUFDN0MsZ0RBQWtDOzs7OztJQUNsQyw2Q0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7XHJcbiAgRGlyZWN0aXZlLFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgRXZlbnRFbWl0dGVyLFxyXG4gIEluamVjdCxcclxuICBJbnB1dCxcclxuICBPbkNoYW5nZXMsXHJcbiAgT25EZXN0cm95LFxyXG4gIE91dHB1dCxcclxuICBQTEFURk9STV9JRCxcclxuICBSZW5kZXJlcjIsXHJcbiAgU2ltcGxlQ2hhbmdlc1xyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgTWVkaWFTZXJ2aWNlIH0gZnJvbSAnLi4vbWVkaWEvbWVkaWEuc2VydmljZSc7XHJcbmltcG9ydCB7IEJyZWFrcG9pbnRDaGFuZ2VFdmVudCB9IGZyb20gJy4vYnJlYWtwb2ludC1jaGFuZ2UtZXZlbnQnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBkaXJlY3RpdmUtc2VsZWN0b3JcclxuICBzZWxlY3RvcjogJ2ltZ1tyZXNwb25zaXZlSW1hZ2VdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUmVzcG9uc2l2ZUltYWdlRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95LCBPbkNoYW5nZXMge1xyXG4gIEBJbnB1dCgpIGltZ1NyYzogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIG1hbnVhbDogYm9vbGVhbjtcclxuICBAT3V0cHV0KCkgYnJlYWtwb2ludFVwID0gbmV3IEV2ZW50RW1pdHRlcjxCcmVha3BvaW50Q2hhbmdlRXZlbnQ+KCk7XHJcblxyXG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uczogeyBba2V5OiBzdHJpbmddOiBTdWJzY3JpcHRpb24gfSA9IHt9O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogYW55LFxyXG4gICAgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmPEhUTUxJbWFnZUVsZW1lbnQ+LFxyXG4gICAgcHJpdmF0ZSBtZWRpYVNlcnZpY2U6IE1lZGlhU2VydmljZSxcclxuICAgIHByaXZhdGUgcmVuZGVyZXIyOiBSZW5kZXJlcjJcclxuICApIHt9XHJcblxyXG4gIG5nT25DaGFuZ2VzKHNpbXBsZUNoYW5nZTogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcclxuICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9ucy5tZWRpYVN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5tZWRpYVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpcy5pbWdTcmMpIHtcclxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMubWVkaWFTdWJzY3JpcHRpb24gPSB0aGlzLm1lZGlhU2VydmljZS5icmVha3BvaW50QW5kV2lkdGhVcCQuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgcmVzdWx0ID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubWFudWFsKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5icmVha3BvaW50VXAuZW1pdCh7XHJcbiAgICAgICAgICAgICAgICBpbWdTcmM6IHRoaXMuaW1nU3JjLFxyXG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludDogcmVzdWx0LmJyZWFrcG9pbnQsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogcmVzdWx0LndpZHRoXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlcjIuc2V0QXR0cmlidXRlKFxyXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAnc3JjJyxcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1nU3JjLnJlcGxhY2UoJzp3aWR0aCcsIHJlc3VsdC53aWR0aClcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICBPYmplY3Qua2V5cyh0aGlzLnN1YnNjcmlwdGlvbnMpLmZvckVhY2goc2sgPT5cclxuICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW3NrXS51bnN1YnNjcmliZSgpXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iXX0=