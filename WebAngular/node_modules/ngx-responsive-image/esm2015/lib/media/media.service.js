/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BreakpointObserver } from '@angular/cdk/layout';
import { Inject, Injectable } from '@angular/core';
import { merge } from 'rxjs';
import { distinctUntilChanged, filter, first, map, pairwise, shareReplay, startWith, takeWhile } from 'rxjs/operators';
import { BREAKPOINTS } from '../breakpoints.token';
import { IMAGE_WIDTHS } from '../image-widths.token';
export class MediaService {
    /**
     * @param {?} breakpointObserver
     * @param {?} breakpoints
     * @param {?} imageWidths
     */
    constructor(breakpointObserver, breakpoints, imageWidths) {
        this.breakpointObserver = breakpointObserver;
        this.breakpoints = breakpoints;
        this.imageWidths = imageWidths;
        this.breakpoints$ = this.breakpointObserver.observe(this.breakpoints);
        this.breakpointChange$ = this.breakpoints$.pipe(filter((/**
         * @param {?} breakpointState
         * @return {?}
         */
        breakpointState => breakpointState.matches)), distinctUntilChanged((/**
         * @param {?} previous
         * @param {?} current
         * @return {?}
         */
        (previous, current) => Object.keys(previous.breakpoints)[Object.values(previous.breakpoints).indexOf(true)] ===
            Object.keys(current.breakpoints)[Object.values(current.breakpoints).indexOf(true)])), startWith((/** @type {?} */ (null))), pairwise());
        this.breakpointUp$ = this.breakpointChange$.pipe(filter((/**
         * @param {?} __0
         * @param {?} i
         * @return {?}
         */
        ([previous, current], i) => {
            if (i === 0) {
                return true;
            }
            else {
                /** @type {?} */
                const previousBreakpoints = Object.values(previous.breakpoints);
                /** @type {?} */
                const currentBreakpoints = Object.values(current.breakpoints);
                /** @type {?} */
                const pbi = previousBreakpoints.findIndex((/**
                 * @param {?} breakpointValue
                 * @return {?}
                 */
                breakpointValue => breakpointValue));
                /** @type {?} */
                const cbi = currentBreakpoints.findIndex((/**
                 * @param {?} breakpointValue
                 * @return {?}
                 */
                breakpointValue => breakpointValue));
                return cbi > pbi;
            }
        })), filter((/**
         * @param {?} __0
         * @return {?}
         */
        ([previous, current]) => {
            /** @type {?} */
            const currentBkreakpoint = Object.keys(current.breakpoints)[Object.values(current.breakpoints).indexOf(true)];
            if (!this.maximumBreakpoint ||
                Object.keys(current.breakpoints).indexOf(currentBkreakpoint) >
                    Object.keys(current.breakpoints).indexOf(this.maximumBreakpoint)) {
                this.maximumBreakpoint = currentBkreakpoint;
                return true;
            }
            else {
                return false;
            }
        })), map((/**
         * @param {?} __0
         * @return {?}
         */
        ([previous, current]) => {
            return Object.keys(current.breakpoints)[Object.values(current.breakpoints).indexOf(true)];
        })), takeWhile((/**
         * @param {?} currentBreakpoint
         * @return {?}
         */
        currentBreakpoint => {
            return (this.maximumBreakpoint !== this.breakpoints[this.breakpoints.length - 1]);
        }), true), shareReplay());
        this.breakpointAndWidthUp$ = merge(this.breakpoints$.pipe(first(), map((/**
         * @param {?} breakpointState
         * @return {?}
         */
        breakpointState => Object.keys(breakpointState.breakpoints)[Object.values(breakpointState.breakpoints).indexOf(true)]))), this.breakpointUp$).pipe(map((/**
         * @param {?} breakpoint
         * @return {?}
         */
        breakpoint => {
            return {
                width: this.imageWidths[this.breakpoints.indexOf(breakpoint)],
                breakpoint
            };
        })), shareReplay());
    }
}
MediaService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MediaService.ctorParameters = () => [
    { type: BreakpointObserver },
    { type: undefined, decorators: [{ type: Inject, args: [BREAKPOINTS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [IMAGE_WIDTHS,] }] }
];
if (false) {
    /** @type {?} */
    MediaService.prototype.breakpoints$;
    /** @type {?} */
    MediaService.prototype.breakpointChange$;
    /** @type {?} */
    MediaService.prototype.breakpointUp$;
    /** @type {?} */
    MediaService.prototype.breakpointAndWidthUp$;
    /**
     * @type {?}
     * @private
     */
    MediaService.prototype.maximumBreakpoint;
    /**
     * @type {?}
     * @private
     */
    MediaService.prototype.breakpointObserver;
    /**
     * @type {?}
     * @private
     */
    MediaService.prototype.breakpoints;
    /**
     * @type {?}
     * @private
     */
    MediaService.prototype.imageWidths;
}
//# sourceMappingURL=data:application/json;base64,